// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/JustinHaTran/ImageRepo/ent/image"
	"github.com/JustinHaTran/ImageRepo/ent/imagerepo"
	"github.com/JustinHaTran/ImageRepo/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// ImageRepoUpdate is the builder for updating ImageRepo entities.
type ImageRepoUpdate struct {
	config
	hooks    []Hook
	mutation *ImageRepoMutation
}

// Where adds a new predicate for the builder.
func (iru *ImageRepoUpdate) Where(ps ...predicate.ImageRepo) *ImageRepoUpdate {
	iru.mutation.predicates = append(iru.mutation.predicates, ps...)
	return iru
}

// SetName sets the name field.
func (iru *ImageRepoUpdate) SetName(s string) *ImageRepoUpdate {
	iru.mutation.SetName(s)
	return iru
}

// AddImageIDs adds the images edge to Image by ids.
func (iru *ImageRepoUpdate) AddImageIDs(ids ...int) *ImageRepoUpdate {
	iru.mutation.AddImageIDs(ids...)
	return iru
}

// AddImages adds the images edges to Image.
func (iru *ImageRepoUpdate) AddImages(i ...*Image) *ImageRepoUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iru.AddImageIDs(ids...)
}

// Mutation returns the ImageRepoMutation object of the builder.
func (iru *ImageRepoUpdate) Mutation() *ImageRepoMutation {
	return iru.mutation
}

// ClearImages clears all "images" edges to type Image.
func (iru *ImageRepoUpdate) ClearImages() *ImageRepoUpdate {
	iru.mutation.ClearImages()
	return iru
}

// RemoveImageIDs removes the images edge to Image by ids.
func (iru *ImageRepoUpdate) RemoveImageIDs(ids ...int) *ImageRepoUpdate {
	iru.mutation.RemoveImageIDs(ids...)
	return iru
}

// RemoveImages removes images edges to Image.
func (iru *ImageRepoUpdate) RemoveImages(i ...*Image) *ImageRepoUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iru.RemoveImageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iru *ImageRepoUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(iru.hooks) == 0 {
		if err = iru.check(); err != nil {
			return 0, err
		}
		affected, err = iru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ImageRepoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iru.check(); err != nil {
				return 0, err
			}
			iru.mutation = mutation
			affected, err = iru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iru.hooks) - 1; i >= 0; i-- {
			mut = iru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iru *ImageRepoUpdate) SaveX(ctx context.Context) int {
	affected, err := iru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iru *ImageRepoUpdate) Exec(ctx context.Context) error {
	_, err := iru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iru *ImageRepoUpdate) ExecX(ctx context.Context) {
	if err := iru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iru *ImageRepoUpdate) check() error {
	if v, ok := iru.mutation.Name(); ok {
		if err := imagerepo.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (iru *ImageRepoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   imagerepo.Table,
			Columns: imagerepo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: imagerepo.FieldID,
			},
		},
	}
	if ps := iru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: imagerepo.FieldName,
		})
	}
	if iru.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   imagerepo.ImagesTable,
			Columns: imagerepo.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: image.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iru.mutation.RemovedImagesIDs(); len(nodes) > 0 && !iru.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   imagerepo.ImagesTable,
			Columns: imagerepo.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: image.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iru.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   imagerepo.ImagesTable,
			Columns: imagerepo.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: image.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{imagerepo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ImageRepoUpdateOne is the builder for updating a single ImageRepo entity.
type ImageRepoUpdateOne struct {
	config
	hooks    []Hook
	mutation *ImageRepoMutation
}

// SetName sets the name field.
func (iruo *ImageRepoUpdateOne) SetName(s string) *ImageRepoUpdateOne {
	iruo.mutation.SetName(s)
	return iruo
}

// AddImageIDs adds the images edge to Image by ids.
func (iruo *ImageRepoUpdateOne) AddImageIDs(ids ...int) *ImageRepoUpdateOne {
	iruo.mutation.AddImageIDs(ids...)
	return iruo
}

// AddImages adds the images edges to Image.
func (iruo *ImageRepoUpdateOne) AddImages(i ...*Image) *ImageRepoUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iruo.AddImageIDs(ids...)
}

// Mutation returns the ImageRepoMutation object of the builder.
func (iruo *ImageRepoUpdateOne) Mutation() *ImageRepoMutation {
	return iruo.mutation
}

// ClearImages clears all "images" edges to type Image.
func (iruo *ImageRepoUpdateOne) ClearImages() *ImageRepoUpdateOne {
	iruo.mutation.ClearImages()
	return iruo
}

// RemoveImageIDs removes the images edge to Image by ids.
func (iruo *ImageRepoUpdateOne) RemoveImageIDs(ids ...int) *ImageRepoUpdateOne {
	iruo.mutation.RemoveImageIDs(ids...)
	return iruo
}

// RemoveImages removes images edges to Image.
func (iruo *ImageRepoUpdateOne) RemoveImages(i ...*Image) *ImageRepoUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iruo.RemoveImageIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (iruo *ImageRepoUpdateOne) Save(ctx context.Context) (*ImageRepo, error) {
	var (
		err  error
		node *ImageRepo
	)
	if len(iruo.hooks) == 0 {
		if err = iruo.check(); err != nil {
			return nil, err
		}
		node, err = iruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ImageRepoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iruo.check(); err != nil {
				return nil, err
			}
			iruo.mutation = mutation
			node, err = iruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iruo.hooks) - 1; i >= 0; i-- {
			mut = iruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iruo *ImageRepoUpdateOne) SaveX(ctx context.Context) *ImageRepo {
	node, err := iruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iruo *ImageRepoUpdateOne) Exec(ctx context.Context) error {
	_, err := iruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iruo *ImageRepoUpdateOne) ExecX(ctx context.Context) {
	if err := iruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iruo *ImageRepoUpdateOne) check() error {
	if v, ok := iruo.mutation.Name(); ok {
		if err := imagerepo.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (iruo *ImageRepoUpdateOne) sqlSave(ctx context.Context) (_node *ImageRepo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   imagerepo.Table,
			Columns: imagerepo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: imagerepo.FieldID,
			},
		},
	}
	id, ok := iruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ImageRepo.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := iruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: imagerepo.FieldName,
		})
	}
	if iruo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   imagerepo.ImagesTable,
			Columns: imagerepo.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: image.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iruo.mutation.RemovedImagesIDs(); len(nodes) > 0 && !iruo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   imagerepo.ImagesTable,
			Columns: imagerepo.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: image.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iruo.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   imagerepo.ImagesTable,
			Columns: imagerepo.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: image.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ImageRepo{config: iruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, iruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{imagerepo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
